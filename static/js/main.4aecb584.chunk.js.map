{"version":3,"sources":["logo.svg","Visualizer/Visualizer.jsx","Visualizer/Algorithms.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Visualizer","p","state","numArray","this","class","onClick","changeNumbers","selectionSort","bubbleSort","mergeSort","heapSort","map","num","style","width","animations","array","indexMin","temp","sort","changes","i","j","length","change","value","flag","push","Algorithms","numBars","document","getElementsByClassName","color","setTimeout","backgroundColor","Math","floor","random","setState","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4aecb584.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Visualizer.css';\r\nimport * as Algorithms from './Algorithms.js';\r\n\r\nclass Visualizer extends React.Component{\r\n    constructor(p){\r\n        super(p);\r\n        this.state = { numArray: [] };\r\n    }\r\n\r\n    render(){\r\n        const {numArray} = this.state;\r\n        return(\r\n        //Displaying buttons and creating a div for each value in the array\r\n        <>   \r\n            <div class = \"buttonPanel\">\r\n                <button class = \"button\" onClick = {() => this.changeNumbers()}>Randomize Numbers</button> \r\n                <button class = \"button\" onClick = {() => this.selectionSort()}>Selection Sort</button>\r\n                <button class = \"button\" onClick = {() => this.bubbleSort()}>Bubble Sort</button>\r\n                <button class = \"button\" onClick = {() => this.mergeSort()}>Merge Sort</button>\r\n                <button class = \"button\" onClick = {() => this.heapSort()}>Heap Sort</button>\r\n            </div> \r\n            <div class= \"window\">  \r\n                {numArray.map(num => (\r\n                    <div class = \"bar\" style = {{width: `${num}px`}}></div>                      \r\n                ))}\r\n            </div>   \r\n        </>    \r\n        );\r\n    }\r\n    \r\n    selectionSort(){\r\n        var animations = Algorithms.selectionSort(this.state.numArray); //Retrieving each animation that needs to be performed\r\n        var numBars = document.getElementsByClassName('bar'); //Mapping all of the bar div's to an array\r\n        let i = 0;\r\n        for(i; i < animations.length; i++){                     \r\n            const {value, flag} = animations[i]; //Storing the vales of the indecies and a flag which indicates a swap or comparison.\r\n\r\n            //Non-swapping elements of animations array\r\n            if ((i+1) % 3 !== 0){\r\n                //On the first pass-through, highlight the comparison with blue, reverse back to green on second pass-through\r\n                const color = (i+1) % 3 === 1 ? 'blue' : 'greenyellow';\r\n                setTimeout(() => {\r\n                    numBars[value[0]].style.backgroundColor = color;\r\n                    numBars[value[1]].style.backgroundColor = color;\r\n                }, i*3);\r\n            //Handling swapping (third pass-through)\r\n            }else{\r\n                //Only continue if the swap flag is set. \r\n                if(flag === \"s\"){\r\n                    setTimeout(() => {\r\n                        var temp = numBars[value[0]].style.width;\r\n                        numBars[value[0]].style.width =  numBars[value[1]].style.width;\r\n                        numBars[value[1]].style.width = temp;\r\n                        numBars[value[1]].style.backgroundColor = 'purple';\r\n                    }, i*3);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    bubbleSort(){\r\n        var animations = Algorithms.bubbleSort(this.state.numArray); //Retrieving each animation that needs to be performed\r\n        var numBars = document.getElementsByClassName('bar'); //Mapping all of the bar div's to an array\r\n        let i = 0;\r\n        for(i; i < animations.length; i++){                     \r\n            const {value, flag} = animations[i]; //Storing the vales of the indecies and a flag which indicates a swap or comparison.\r\n\r\n            //Non-swapping elements of animations array\r\n            if ((i+1) % 3 !== 0){\r\n                //On the first pass-through, highlight the comparison with blue, reverse back to green on second pass-through\r\n                const color = (i+1) % 3 === 1 ? 'blue' : 'greenyellow';\r\n                setTimeout(() => {\r\n                    numBars[value[0]].style.backgroundColor = color;\r\n                    numBars[value[1]].style.backgroundColor = color;\r\n                }, i*3);\r\n            //Handling swapping (third pass-through)\r\n            }else{\r\n                //Only continue if the swap flag is set.\r\n                if(flag === \"s\"){\r\n                    setTimeout(() => {\r\n                        var temp = numBars[value[0]].style.width;\r\n                        numBars[value[0]].style.width =  numBars[value[1]].style.width;\r\n                        numBars[value[1]].style.width = temp;\r\n                    }, i*3);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    mergeSort(){\r\n        //TODO\r\n    }\r\n\r\n    heapSort(){\r\n        //TODO\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.changeNumbers(); //Display bars on load\r\n    }\r\n\r\n    //Create array with random values.\r\n    changeNumbers(){\r\n        var numArray = [];\r\n        var i = 0;\r\n        for(i; i < 50; i++){\r\n            numArray.push(randomInt());\r\n        }\r\n        this.setState({numArray});\r\n    }\r\n\r\n}\r\n\r\n//Randomizer function.\r\nfunction randomInt(){\r\n    return Math.floor(Math.random()*701 + 10); //Minimum width set to 10 so the bars are always visible\r\n}\r\nexport default Visualizer;","export function selectionSort(array) {\r\n    var sort = array;\r\n    var changes = []; //\r\n    var i = 0;\r\n    var j = 0;\r\n    var indexMin;\r\n    var temp;\r\n    for(i; i < sort.length; i++){\r\n\r\n        var change;\r\n        indexMin = i;\r\n        for(j = i + 1; j < sort.length; j++){\r\n            change = {};\r\n            change.value = [indexMin, j];\r\n            change.flag = \"c\";\r\n\r\n            if(sort[indexMin] > sort[j]){\r\n                indexMin = j;\r\n            }\r\n            changes.push(change);\r\n            changes.push(change);\r\n            changes.push(change);\r\n        }\r\n        change = {};\r\n        change.value = [indexMin, i];\r\n        change.flag = \"s\";\r\n        temp = sort[indexMin];\r\n        sort[indexMin] = sort[i];\r\n        sort[i] = temp;\r\n        changes.push(change);\r\n        changes.push(change);\r\n        changes.push(change);\r\n    }\r\n    return changes;\r\n}\r\n\r\nexport function bubbleSort(array) {\r\n    var sort = array;\r\n    var changes = [];\r\n    \r\n    for(let i = 0; i < array.length - 1; i++){\r\n        var change;\r\n        for(let j = 0; j < array.length - i - 1; j++){\r\n            change = {};\r\n            change.value = [j, j+1];\r\n            change.flag = \"c\";\r\n            changes.push(change);\r\n            changes.push(change);\r\n            \r\n\r\n            if(sort[j] > sort[j+1]){\r\n                change = {};\r\n                change.value = [j, j+1];\r\n                change.flag = \"s\";\r\n                const temp = sort[j];\r\n                sort[j] = sort[j+1];\r\n                sort[j+1] = temp;\r\n    \r\n            }\r\n            changes.push(change);\r\n        }\r\n      \r\n    }\r\n    return changes;\r\n}; ","import React from 'react';\nimport logo from './logo.svg';\nimport Visualizer from './Visualizer/Visualizer.jsx'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Visualizer></Visualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}